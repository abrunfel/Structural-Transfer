
clear all
close all

%summer_traj_step5 is revised from equal_rmse_plot_jin_bo_2.m

% This program computes the root-mean-squared-error of the movement path for each trial
% It reads the data file generated by the program *_exp.m for all subjects
% and resamples the movement paths for each trial to generate equally-distant samples. Also plots the group-averaged movement path
% plus/minus a standard deviation (shaded area)


%% directory and shit
directory = cd('/Volumes/mnl/Data/UURAF Projects/UURAF 2019 Structural Learning and Transfer/Post_Step_2');

dir_list = dir('*_STR*test*.mat');    %Store subject *mat data file names in variable (struct array).

dir_list = {dir_list.name}; % filenames
dir_list = sort(dir_list);  % sorts files

A2 = length(dir_list);      % how many files to process?
% hand='_rh';

numTrials = 72;
trials = 1:1:numTrials;


% Initialize
mov_path_VFB_x90=[];
mov_path_AD1_x90=[];
mov_path_AD7_x90=[];
mov_path_DAD_x90=[];
mov_path_VFB_y90=[];
mov_path_AD1_y90=[];
mov_path_AD7_y90=[];
mov_path_DAD_y90=[];

mov_path_VFB_x270=[];
mov_path_AD1_x270=[];
mov_path_AD7_x270=[];
mov_path_DAD_x270=[];
mov_path_VFB_y270=[];
mov_path_AD1_y270=[];
mov_path_AD7_y270=[];
mov_path_DAD_y270=[];


%% Main subject loop
for B = 1:1:A2
    load(char(dir_list(B)));
    
    k=isfinite(ide);
    for i=1:numTrials
        if k(i)==1
            count = i;
        end
    end
    
    %visual baseline, kinesthetic baseline, adaptation (x4) and deadaptation
    %trial numbers in the sequence
    VFB = 1:16;
    AD1 = 17:28;
    AD7 = 45:56;
    DAD = 57:72;
    
    fs = 1000; % Sample Rate (Hz)
    delta_t = 1/fs; %Sample Period
    
    % Conversion between global and local reference frame (this is due to all
    % x,y hand positions being referenced in the global frame, whereas the
    % targets in the target table are referenced in a local frame specified in
    % Deterit-E
    Tx = sortData(1,1).TARGET_TABLE.X_GLOBAL(1) - sortData(1,1).TARGET_TABLE.X(1);
    Ty = sortData(1,1).TARGET_TABLE.Y_GLOBAL(1) - sortData(1,1).TARGET_TABLE.Y(1);
    
    % Define rotation amount
    theta(VFB) = 0;
    theta(AD1) = 60;
    theta(AD7) = 60;
    theta(DAD) = 0;
    
    % Find the Cursor Position
    % First, translate rotation point to global origin
    % Then apply rotation, and translate back to target origin
    cursorPosX = cell(numTrials,1);
    cursorPosY = cell(numTrials,1);
    handPosX = cell(numTrials,1);
    handPosY = cell(numTrials,1);
    for i = 1:numTrials
        handPosX{i,1} = sortData(i).Left_HandX - sortData(1).TARGET_TABLE.X_GLOBAL(1)/100; % Translate to global origin
        handPosY{i,1} = sortData(i).Left_HandY - sortData(1).TARGET_TABLE.Y_GLOBAL(1)/100;
        
        cursorPosX{i,1} = handPosX{i,1}.*cosd(theta(i)) - handPosY{i,1}.*sind(theta(i)); % Reverse the rotation
        cursorPosY{i,1} = handPosX{i,1}.*sind(theta(i)) + handPosY{i,1}.*cosd(theta(i));
        
        cursorPosX{i,1} = cursorPosX{i,1} + sortData(1).TARGET_TABLE.X_GLOBAL(1)/100; % Translate back to target origin
        cursorPosY{i,1} = cursorPosY{i,1} + sortData(1).TARGET_TABLE.Y_GLOBAL(1)/100;
    end
    
    target_theta = zeros(numTrials,1);
    target_theta(downTrials) = 3*pi/2;
    target_theta(upTrials) = pi/2;
    
    % extracts trajectory for each trial
    for ii=1:count
        if wrong_trial(ii)==0
            
            xx = cursorPosX{ii,1}(onset(ii)+1:offset(ii))*100;   
            yy = cursorPosY{ii,1}(onset(ii)+1:offset(ii))*100;
            
            % spatial resampling of movement path
            N= 2000; N1= length(xx); % Computes equally-spaced vector assuming 2000 samples
            xc= 1/(N-1)*[0:N-1]*(xx(N1)-xx(1))+xx(1);
            yc= 1/(N-1)*[0:N-1]*(yy(N1)-yy(1))+yy(1);
            
            % integrates the movement length
            % mov_int(ii)=sum(sqrt(diff(xx).^2+ diff(yy).^2));
            di=[0:N-1]*mov_int(ii)/(N-1);
            d=[0; [cumsum(sqrt((diff(xx).^2)+ (diff(yy).^2)))]];
            
            % interpolates the movement path to make it equally spaced
            %             x2i= interp1q(d,xx,di');
            %             y2i= interp1q(d,yy,di');
            x2i= interp1(1:length(xx),xx,linspace(1, length(xx), 2000));
            y2i= interp1(1:length(yy),yy,linspace(1, length(yy), 2000));
            x2i = x2i';
            y2i = y2i';
            %             x2i(N)=xc(N);
            %             y2i(N)=yc(N);
            ideal =[xc', yc'];
            resampled_path =[x2i, y2i];
            
            %VFB
            if ((ii>=1 && ii<=16) && target_theta(ii)==(pi/2))
                mov_path_VFB_x90=[mov_path_VFB_x90 x2i];
                mov_path_VFB_y90=[mov_path_VFB_y90 y2i];
            end
            
            %AD1
            if ((ii>=17 && ii<=20) && target_theta(ii)==(pi/2))
                mov_path_AD1_x90=[mov_path_AD1_x90 x2i];
                mov_path_AD1_y90=[mov_path_AD1_y90 y2i];
            end
            
            %AD7
            if ((ii>=53 && ii<=56) && target_theta(ii)==(pi/2))
                mov_path_AD7_x90=[mov_path_AD7_x90 x2i];
                mov_path_AD7_y90=[mov_path_AD7_y90 y2i];
            end
            
            %DAD
            if ((ii>=57 && ii<=72) && target_theta(ii)==(pi/2))
                mov_path_DAD_x90=[mov_path_DAD_x90 x2i];
                mov_path_DAD_y90=[mov_path_DAD_y90 y2i];
            end
     
            %VFB
            if ((ii>=1 && ii<=16) && target_theta(ii)==(270*pi/180))
                mov_path_VFB_x270=[mov_path_VFB_x270 x2i];
                mov_path_VFB_y270=[mov_path_VFB_y270 y2i];
            end
            
            %AD1
            if ((ii>=17 && ii<=20) && target_theta(ii)==(270*pi/180))
                mov_path_AD1_x270=[mov_path_AD1_x270 x2i];
                mov_path_AD1_y270=[mov_path_AD1_y270 y2i];
            end
            
            %AD7
            if ((ii>=53 && ii<=56) && target_theta(ii)==(270*pi/180))
                mov_path_AD7_x270=[mov_path_AD7_x270 x2i];
                mov_path_AD7_y270=[mov_path_AD7_y270 y2i];
            end
            
            %DAD
            if ((ii>=57 && ii<=72) && target_theta(ii)==(270*pi/180))
                mov_path_DAD_x270=[mov_path_DAD_x270 x2i];
                mov_path_DAD_y270=[mov_path_DAD_y270 y2i];
            end
        end
    end
end

%% Paths

% nanmean mov paths per target / 90 deg, x, visual
VFB_path_x90=nanmean(mov_path_VFB_x90');
AD1_path_x90=nanmean(mov_path_AD1_x90');
AD7_path_x90=nanmean(mov_path_AD7_x90');
DAD_path_x90=nanmean(mov_path_DAD_x90');
% pk2_path_x90=nanmean(mov_path_pk2_x90');
% SD of mov paths
VFB_path_sd_x90=nanstd(mov_path_VFB_x90');
AD1_path_sd_x90=nanstd(mov_path_AD1_x90');
AD7_path_sd_x90=nanstd(mov_path_AD7_x90');
DAD_path_sd_x90=nanstd(mov_path_DAD_x90');
% pk2_path_sd_x90=nanstd(mov_path_pk2_x90');

% mean mov paths per target / 90 deg, y, visual
VFB_path_y90=nanmean(mov_path_VFB_y90');
AD1_path_y90=nanmean(mov_path_AD1_y90');
AD7_path_y90=nanmean(mov_path_AD7_y90');
DAD_path_y90=nanmean(mov_path_DAD_y90');
% pk2_path_y90=nanmean(mov_path_pk2_y90');
% SD of mov paths
VFB_path_sd_y90=nanstd(mov_path_VFB_y90');
AD1_path_sd_y90=nanstd(mov_path_AD1_y90');
AD7_path_sd_y90=nanstd(mov_path_AD7_y90');
DAD_path_sd_y90=nanstd(mov_path_DAD_y90');
% pk2_path_sd_y90=nanstd(mov_path_pk2_y90');


% nanmean mov paths per target / 270 deg, x, visual
VFB_path_x270=nanmean(mov_path_VFB_x270');
AD1_path_x270=nanmean(mov_path_AD1_x270');
AD7_path_x270=nanmean(mov_path_AD7_x270');
DAD_path_x270=nanmean(mov_path_DAD_x270');
% pk2_path_x270=nanmean(mov_path_pk2_x270');
% SD of mov paths
VFB_path_sd_x270=nanstd(mov_path_VFB_x270');
AD1_path_sd_x270=nanstd(mov_path_AD1_x270');
AD7_path_sd_x270=nanstd(mov_path_AD7_x270');
DAD_path_sd_x270=nanstd(mov_path_DAD_x270');
% pk2_path_sd_x270=nanstd(mov_path_pk2_x270');

% mean mov paths per target / 270 deg, y, visual
VFB_path_y270=nanmean(mov_path_VFB_y270');
AD1_path_y270=nanmean(mov_path_AD1_y270');
AD7_path_y270=nanmean(mov_path_AD7_y270');
DAD_path_y270=nanmean(mov_path_DAD_y270');
% pk2_path_y270=nanmean(mov_path_pk2_y270');
% SD of mov paths
VFB_path_sd_y270=nanstd(mov_path_VFB_y270');
AD1_path_sd_y270=nanstd(mov_path_AD1_y270');
AD7_path_sd_y270=nanstd(mov_path_AD7_y270');
DAD_path_sd_y270=nanstd(mov_path_DAD_y270');
% pk2_path_sd_y270=nanstd(mov_path_pk2_y270');


%decimate data to 400 samples
% mean, y-coordinate
temp=reshape(VFB_path_y90,5,400);
VFB_path_y90=temp(1,:);
temp=reshape(VFB_path_y270,5,400);
VFB_path_y270=temp(1,:);

temp=reshape(AD1_path_y90,5,400);
AD1_path_y90=temp(1,:);
temp=reshape(AD1_path_y270,5,400);
AD1_path_y270=temp(1,:);

temp=reshape(AD7_path_y90,5,400);
AD7_path_y90=temp(1,:);
temp=reshape(AD7_path_y270,5,400);
AD7_path_y270=temp(1,:);

temp=reshape(DAD_path_y90,5,400);
DAD_path_y90=temp(1,:);
temp=reshape(DAD_path_y270,5,400);
DAD_path_y270=temp(1,:);


% mean, x-coordinate
temp=reshape(VFB_path_x90,5,400);
VFB_path_x90=temp(1,:);
temp=reshape(VFB_path_x270,5,400);
VFB_path_x270=temp(1,:);

temp=reshape(AD1_path_x90,5,400);
AD1_path_x90=temp(1,:);
temp=reshape(AD1_path_x270,5,400);
AD1_path_x270=temp(1,:);

temp=reshape(AD7_path_x90,5,400);
AD7_path_x90=temp(1,:);
temp=reshape(AD7_path_x270,5,400);
AD7_path_x270=temp(1,:);

temp=reshape(DAD_path_x90,5,400);
DAD_path_x90=temp(1,:);
temp=reshape(DAD_path_x270,5,400);
DAD_path_x270=temp(1,:);


% sd, y-coordinate
temp=reshape(VFB_path_sd_y90,5,400);
VFB_path_sd_y90=temp(1,:);
temp=reshape(VFB_path_sd_y270,5,400);
VFB_path_sd_y270=temp(1,:);

temp=reshape(AD1_path_sd_y90,5,400);
AD1_path_sd_y90=temp(1,:);
temp=reshape(AD1_path_sd_y270,5,400);
AD1_path_sd_y270=temp(1,:);

temp=reshape(AD7_path_sd_y90,5,400);
AD7_path_sd_y90=temp(1,:);
temp=reshape(AD7_path_sd_y270,5,400);
AD7_path_sd_y270=temp(1,:);

temp=reshape(DAD_path_sd_y90,5,400);
DAD_path_sd_y90=temp(1,:);
temp=reshape(DAD_path_sd_y270,5,400);
DAD_path_sd_y270=temp(1,:);

% SD, x-coordinate
temp=reshape(VFB_path_sd_x90,5,400);
VFB_path_sd_x90=temp(1,:);
temp=reshape(VFB_path_sd_x270,5,400);
VFB_path_sd_x270=temp(1,:);

temp=reshape(AD1_path_sd_x90,5,400);
AD1_path_sd_x90=temp(1,:);
temp=reshape(AD1_path_sd_x270,5,400);
AD1_path_sd_x270=temp(1,:);

temp=reshape(AD7_path_sd_x90,5,400);
AD7_path_sd_x90=temp(1,:);
temp=reshape(AD7_path_sd_x270,5,400);
AD7_path_sd_x270=temp(1,:);

temp=reshape(DAD_path_sd_x90,5,400);
DAD_path_sd_x90=temp(1,:);
temp=reshape(DAD_path_sd_x270,5,400);
DAD_path_sd_x270=temp(1,:);


%% Movement Path Plots

ang = 0:0.1:2.01*pi;
wrong_trial(wrong_trial==1) = 1;
r = sortData(1).TARGET_TABLE.Visual_radius(2);
r_home = sortData(1).TARGET_TABLE.Visual_radius(1);
figure

set(gcf,'Color','w')
%plots movement paths
h1=figure(1);
set(h1,'Units','centimeters', 'Position',[10 10 20 6])

% Baseline
subplot(1,4,1);

elipse2(VFB_path_x90,VFB_path_y90-Ty,VFB_path_sd_x90,VFB_path_sd_y90); hold on;
elipse2(VFB_path_x270,VFB_path_y270-Ty,VFB_path_sd_x270,VFB_path_sd_y270); hold on;

plot(VFB_path_x90-Tx,VFB_path_y90-Ty,'k-','LineWidth',1.1); hold on; % mean path
plot(VFB_path_x270-Tx,VFB_path_y270-Ty,'k-','LineWidth',1.1); hold on; % mean path

axis([-25 5 -15 15]); set(gca,'LineWidth',2,'XTick',[-25 -10 5],'YTick',[-15 -10 0 10 15],'YTickLabel',[-15 -10 0 10 15],'FontName','Arial','FontSize',10); title('Baseline','fontsize',11);
axis square
hold on
plot(sortData(1).TARGET_TABLE.X(1)+r_home*cos(ang),sortData(1).TARGET_TABLE.Y(1)+r_home*sin(ang),'Color',[255/255 117/255 56/255]) %home position
hold on
plot(sortData(1).TARGET_TABLE.X(2)+r*cos(ang),sortData(1).TARGET_TABLE.Y(2)+r*sin(ang),'r')
hold on
plot(sortData(1).TARGET_TABLE.X(3)+r*cos(ang),sortData(1).TARGET_TABLE.Y(3)+r*sin(ang),'r')


% Early Exposure
subplot(1,4,2);
elipse2(AD1_path_x90,AD1_path_y90-Ty,AD1_path_sd_x90,AD1_path_sd_y90); hold on;
elipse2(AD1_path_x270,AD1_path_y270-Ty,AD1_path_sd_x270,AD1_path_sd_y270); hold on;

plot(AD1_path_x90-Tx,AD1_path_y90-Ty,'k-','LineWidth',1.1); hold on; % mean path
plot(AD1_path_x270-Tx,AD1_path_y270-Ty,'k-','LineWidth',1.1); hold on; % mean path
%plot (8.5, 0.0, 'kx', 8.5, 7.5, 'ko', 8.5, -7.5, 'ko','MarkerSize',4);
title(['vis-exp early'],'FontName','Arial','FontSize',10); axis([-3.5 20.5 -12 12]); axis square;
set(gca,'XTick',[]); set(gca,'YTick',[]);
axis([-25 5 -15 15]); set(gca,'LineWidth',2,'XTick',[-25 -10 5],'YTick',[-15 -10 0 10 15],'YTickLabel',[-15 -10 0 10 15],'FontName','Arial','FontSize',10); title('Early Exposure','fontsize',11);

axis square
hold on
plot(sortData(1).TARGET_TABLE.X(1)+r_home*cos(ang),sortData(1).TARGET_TABLE.Y(1)+r_home*sin(ang),'Color',[255/255 117/255 56/255]) %home position
hold on
plot(sortData(1).TARGET_TABLE.X(2)+r*cos(ang),sortData(1).TARGET_TABLE.Y(2)+r*sin(ang),'r')
hold on
plot(sortData(1).TARGET_TABLE.X(3)+r*cos(ang),sortData(1).TARGET_TABLE.Y(3)+r*sin(ang),'r')
% exportfig(h2,'path2','Format','eps','Width',5,'Height',5,'Color','gray','Resolution',300,'FontMode','scaled','LineMode','scaled');

% Late Exposure
subplot(1,4,3);
elipse2(AD7_path_x90,AD7_path_y90-Ty,AD7_path_sd_x90,AD7_path_sd_y90); hold on;
elipse2(AD7_path_x270,AD7_path_y270-Ty,AD7_path_sd_x270,AD7_path_sd_y270); hold on;

plot(AD7_path_x90-Tx,AD7_path_y90-Ty,'k-','LineWidth',1.1); hold on; % mean path
plot(AD7_path_x270-Tx,AD7_path_y270-Ty,'k-','LineWidth',1.1); hold on; % mean path
%plot (8.5, 0.0, 'kx', 8.5, 7.5, 'ko', 8.5, -7.5, 'ko','MarkerSize',4);
title(['vis-exp late'],'FontName','Arial','FontSize',10); axis([-3.5 20.5 -12 12]); axis square;
set(gca,'XTick',[]); set(gca,'YTick',[]);

axis([-25 5 -15 15]); set(gca,'LineWidth',2,'XTick',[-25 -10 5],'YTick',[-15 -10 0 10 15],'YTickLabel',[-15 -10 0 10 15],'FontName','Arial','FontSize',10); title('Late Exposure','fontsize',11);
axis square
hold on
plot(sortData(1).TARGET_TABLE.X(1)+r_home*cos(ang),sortData(1).TARGET_TABLE.Y(1)+r_home*sin(ang),'Color',[255/255 117/255 56/255]) %home position
hold on
plot(sortData(1).TARGET_TABLE.X(2)+r*cos(ang),sortData(1).TARGET_TABLE.Y(2)+r*sin(ang),'r')
hold on
plot(sortData(1).TARGET_TABLE.X(3)+r*cos(ang),sortData(1).TARGET_TABLE.Y(3)+r*sin(ang),'r')
% exportfig(h3,'path3','Format','eps','Width',5,'Height',5,'Color','gray','Resolution',300,'FontMode','scaled','LineMode','scaled');

% Post-Exposure
subplot(1,4,4);
elipse2(DAD_path_x90,DAD_path_y90-Ty,DAD_path_sd_x90,DAD_path_sd_y90); hold on;
elipse2(DAD_path_x270,DAD_path_y270-Ty,DAD_path_sd_x270,DAD_path_sd_y270); hold on;

plot(DAD_path_x90-Tx,DAD_path_y90-Ty,'k-','LineWidth',1.1); hold on; % mean path
plot(DAD_path_x270-Tx,DAD_path_y270-Ty,'k-','LineWidth',1.1); hold on; % mean path
%plot (8.5, 0.0, 'kx', 8.5, 7.5, 'ko', 8.5, -7.5, 'ko','MarkerSize',4); %kinesthetic targets
title(['vis-post'],'FontName','Arial','FontSize',10); axis square; %([-3.5 20.5 -12 12]); axis square;
set(gca,'XTick',[]); set(gca,'YTick',[]);

axis([-25 5 -15 15]); set(gca,'LineWidth',2,'XTick',[-25 -10 5],'YTick',[-15 -10 0 10 15],'YTickLabel',[-15 -10 0 10 15],'FontName','Arial','FontSize',10); title('Post Exposure','fontsize',11);
axis square
hold on
plot(sortData(1).TARGET_TABLE.X(1)+r_home*cos(ang),sortData(1).TARGET_TABLE.Y(1)+r_home*sin(ang),'Color',[255/255 117/255 56/255]) %home position
hold on
plot(sortData(1).TARGET_TABLE.X(2)+r*cos(ang),sortData(1).TARGET_TABLE.Y(2)+r*sin(ang),'r')
hold on
plot(sortData(1).TARGET_TABLE.X(3)+r*cos(ang),sortData(1).TARGET_TABLE.Y(3)+r*sin(ang),'r')

% Save figure as jpeg format
cd('/Volumes/mnl/Data/UURAF Projects/UURAF 2019 Structural Learning and Transfer/Routput')
saveas(gcf,'structure_handpath_STR.jpg')